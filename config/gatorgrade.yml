setup: |
  echo "Setting up Digital Sensor Simulation Dashboard Lab environment..."
  echo "Done!"
---

# Digital Sensor Simulation Dashboard Lab - Gatorgrade Configuration
# Tests Python foundations concepts from Week 2-3 with IoT bridge to Week 4

# Check that main.py file exists and is properly structured
- src/main.py:
    - description: Ensure that the main.py file exists in the src/ directory
      check: ConfirmFileExists
    - description: Complete all TODOs, remove the TODO markers from main.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    - description: Include appropriate single-line comments explaining sensor code sections
      check: CountSingleLineComments
      options:
        language: "Python"
        count: 15
        exact: false
    - description: Include sufficient multiple-line comments (docstrings)
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 1
        exact: false

# Check for Week 2 concepts: Variables and basic Python structure with IoT focus
- src/main.py:
    - description: Use input() function to collect sensor data (Week 2 concept)
      check: MatchFileFragment
      options:
        fragment: input(
        count: 5
        exact: false
    - description: Use print() function for IoT dashboard output (Week 2 concept)
      check: MatchFileFragment
      options:
        fragment: print(
        count: 15
        exact: false
    - description: Create descriptive sensor variable names following Week 2 best practices
      check: MatchFileFragment
      options:
        fragment: device_name
        count: 1
        exact: false
    - description: Create descriptive sensor variable names following Week 2 best practices
      check: MatchFileFragment
      options:
        fragment: temperature_f
        count: 1
        exact: false
    - description: Create descriptive sensor variable names following Week 2 best practices
      check: MatchFileFragment
      options:
        fragment: light_level
        count: 1
        exact: false

# Check for Week 3 concepts: Type conversion for sensor data
- src/main.py:
    - description: Use int() function for sensor reading type conversion (Week 3 concept)
      check: MatchFileFragment
      options:
        fragment: int(
        count: 4
        exact: false
    - description: Use str() function for sensor data type conversion (Week 3 concept)
      check: MatchFileFragment
      options:
        fragment: str(
        count: 2
        exact: false

# Check for Week 3 concepts: Arithmetic operations for sensor analysis
- src/main.py:
    - description: Use multiplication (*) for sensor calculations (Week 3 concept)
      check: MatchFileFragment
      options:
        fragment: "*"
        count: 3
        exact: false
    - description: Use division (/) for sensor analysis (Week 3 concept)  
      check: MatchFileFragment
      options:
        fragment: "/"
        count: 2
        exact: false
    - description: Use addition (+) for sensor calculations (Week 3 concept)
      check: MatchFileFragment
      options:
        fragment: "+"
        count: 1
        exact: false
    - description: Use subtraction (-) for temperature conversion (Week 3 concept)
      check: MatchFileFragment
      options:
        fragment: "temperature_f - 32"
        count: 1
        exact: true

# Check for Week 3 concepts: String operations for IoT device management
- src/main.py:
    - description: Use string slicing for device naming (Week 3 concept)
      check: MatchFileFragment
      options:
        fragment: "[0:3]"
        count: 1
        exact: false
    - description: Use .upper() method for sensor status (Week 3 concept)
      check: MatchFileFragment
      options:
        fragment: .upper()
        count: 1
        exact: false
    - description: Use string concatenation for device ID creation (Week 3 concept)
      check: MatchFileFragment
      options:
        fragment: device_id
        count: 2
        exact: false

# Check for specific sensor calculations showing IoT understanding
- src/main.py:
    - description: Calculate temperature conversion using proper arithmetic
      check: MatchFileFragment
      options:
        fragment: "temperature_c"
        count: 2
        exact: false
    - description: Calculate sensor rates and averages
      check: MatchFileFragment
      options:
        fragment: "motion_per_hour"
        count: 2
        exact: false
    - description: Create IoT device status messages
      check: MatchFileFragment
      options:
        fragment: "temp_status"
        count: 2
        exact: false

# Check reflection file for IoT learning
- writing/reflection.md:
    - description: Ensure that the reflection.md file exists in the writing/ directory
      check: ConfirmFileExists
    - description: Complete all TODOs, remove the TODO markers from reflection
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    - description: Write a minimum number of meaningful words in the reflection
      check: CountFileWords
      options:
        count: 300
        exact: false
    - description: Include discussion of Week 2 concepts in IoT context
      check: MatchFileFragment
      options:
        fragment: "Week 2"
        count: 1
        exact: false
    - description: Include discussion of Week 3 concepts in sensor context
      check: MatchFileFragment
      options:
        fragment: "Week 3"
        count: 1
        exact: false
    - description: Include discussion of sensor data and IoT concepts
      check: MatchFileFragment
      options:
        fragment: "sensor"
        count: 3
        exact: false
    - description: Include discussion of preparing for Pico 2W next week
      check: MatchFileFragment
      options:
        fragment: "Pico 2W"
        count: 1
        exact: false
    - description: Include discussion of peer sensor data comparison
      check: MatchFileFragment
      options:
        fragment: "classmate"
        count: 1
        exact: false
    - description: Confirm that the markdown file has appropriate headers
      check: CountMarkdownTags
      options:
        tag: heading
        count: 6
        exact: false
    - description: Include code examples in reflection
      check: CountMarkdownTags
      options:
        tag: code_block
        count: 3
        exact: false

# Test that the sensor simulation program can run without errors
- description: Program executes without Python syntax errors
  check: CountCommandOutput
  options:
    command: 'cd src && echo -e "Room Monitor\ndorm room\n8\n72\n450\n65\n12" | python main.py'
    count: 25
    exact: false

# Check for specific IoT output content when program runs
- description: Program displays sensor dashboard welcome message
  check: MatchCommandFragment
  options:
    command: 'cd src && echo -e "Room Monitor\ndorm room\n8\n72\n450\n65\n12" | python main.py'
    fragment: "SENSOR SIMULATION"
    count: 1
    exact: true

- description: Program displays temperature analysis section
  check: MatchCommandFragment
  options:
    command: 'cd src && echo -e "Room Monitor\ndorm room\n8\n72\n450\n65\n12" | python main.py'
    fragment: "TEMPERATURE ANALYSIS"
    count: 1
    exact: true

- description: Program displays IoT next week message
  check: MatchCommandFragment
  options:
    command: 'cd src && echo -e "Room Monitor\ndorm room\n8\n72\n450\n65\n12" | python main.py'
    fragment: "Pico 2W"
    count: 1
    exact: true

# Check for git repository activity
- description: Have at least a minimum number of commits in repository
  check: CountCommits
  options:
    count: 3
