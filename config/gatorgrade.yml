setup: |
  echo "Setting up Digital Sensor Simulation Dashboard Lab environment..."
  echo "Done!"
---

# Digital Sensor Simulation Dashboard Lab - Gatorgrade Configuration
# Tests Python foundations concepts with IoT bridge to future labs
# 32 total checks = 3.0 points | Partial credit: (checks passed ÷ 32) × 3.0 points

# ============================================================================
# PROGRAM STRUCTURE AND EXECUTION CHECKS (Bullet Point 1: Program runs without errors)
# ============================================================================

# Check that main.py file exists and is properly structured
- src/main.py:
    - description: Ensure that the main.py file exists in the src/ directory
      check: ConfirmFileExists
    - description: Complete all TODOs, remove the TODO markers from main.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    - description: Include appropriate single-line comments explaining sensor code sections
      check: CountSingleLineComments
      options:
        language: "Python"
        count: 15
        exact: false
    - description: Include sufficient multiple-line comments (docstrings)
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 1
        exact: false

# ============================================================================
# INPUT COLLECTION CHECKS (Bullet Point 2: All required input collection)
# ============================================================================

# Check for Python concepts: Variables and basic Python structure with IoT focus
- src/main.py:
    - description: Use input() function to collect sensor data (Python input/output concept)
      check: MatchFileFragment
      options:
        fragment: input(
        count: 6
        exact: false
    - description: Use print() function for IoT dashboard output (Python output concept)
      check: MatchFileFragment
      options:
        fragment: print(
        count: 30
        exact: false
    - description: Create descriptive sensor variable names following Python best practices
      check: MatchFileFragment
      options:
        fragment: device_name
        count: 1
        exact: false
    - description: Create descriptive sensor variable names following Python best practices
      check: MatchFileFragment
      options:
        fragment: temperature_f
        count: 1
        exact: false
    - description: Create descriptive sensor variable names following Python best practices
      check: MatchFileFragment
      options:
        fragment: light_level
        count: 1
        exact: false

# ============================================================================
# TYPE CONVERSION CHECKS (Bullet Point 4: Proper type conversion used)
# ============================================================================

# Check for Python concepts: Type conversion for sensor data
- src/main.py:
    - description: Use int() function for sensor reading type conversion (Python type conversion concept)
      check: MatchFileFragment
      options:
        fragment: int(
        count: 6
        exact: false

# ============================================================================
# CALCULATIONS CHECKS (Bullet Point 3: All required calculations work correctly)
# ============================================================================

# Check for Python concepts: Arithmetic operations for sensor analysis
- src/main.py:
    - description: Use multiplication (*) for sensor calculations (Python arithmetic concept)
      check: MatchFileFragment
      options:
        fragment: "*"
        count: 3
        exact: false
    - description: Use division (/) for sensor analysis (Python arithmetic concept)  
      check: MatchFileFragment
      options:
        fragment: "/"
        count: 2
        exact: false
    - description: Use addition (+) for sensor calculations (Python arithmetic concept)
      check: MatchFileFragment
      options:
        fragment: "+"
        count: 1
        exact: false
    - description: Use subtraction (-) for temperature conversion (Python arithmetic concept)
      check: MatchFileFragment
      options:
        fragment: "temperature_f - 32"
        count: 1
        exact: true

# ============================================================================
# STRING OPERATIONS CHECKS (Bullet Point 5: String operations implemented)
# ============================================================================

# Check for Python concepts: String operations for IoT device management
- src/main.py:
    - description: Use string slicing for device naming (Python string concept)
      check: MatchFileFragment
      options:
        fragment: "[0:3]"
        count: 1
        exact: false
    - description: Use .upper() method for sensor status (Python string concept)
      check: MatchFileFragment
      options:
        fragment: .upper()
        count: 1
        exact: false
    - description: Use string concatenation for device ID creation (Python string concept)
      check: MatchFileFragment
      options:
        fragment: device_id
        count: 2
        exact: false

# ============================================================================
# SPECIFIC SENSOR CALCULATIONS (Part of Bullet Point 3: Calculations)
# ============================================================================

# Check for specific sensor calculations showing IoT understanding
- src/main.py:
    - description: Calculate temperature conversion using proper arithmetic
      check: MatchFileFragment
      options:
        fragment: "temperature_c"
        count: 2
        exact: false
    - description: Calculate sensor rates and averages
      check: MatchFileFragment
      options:
        fragment: "motion_per_hour"
        count: 2
        exact: false
    - description: Create IoT device status messages
      check: MatchFileFragment
      options:
        fragment: "temp_status"
        count: 3
        exact: false

# ============================================================================
# REFLECTION AND DOCUMENTATION CHECKS
# ============================================================================

# Check reflection file for IoT learning
- writing/reflection.md:
    - description: Ensure that the reflection.md file exists in the writing/ directory
      check: ConfirmFileExists
    - description: Complete all TODOs, remove the TODO markers from reflection
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    - description: Write a minimum number of meaningful words in the reflection
      check: CountFileWords
      options:
        count: 300
        exact: false

# ============================================================================
# PROGRAM EXECUTION TESTING (Bullet Point 1: Program runs without errors)
# ============================================================================

# Test that the sensor simulation program can run without errors
# This test automatically provides sample sensor data to your program:
# Device Name: "Room Monitor", Location: "dorm room", Hours: 8
# Temperature: 72°F, Light: 450 lux, Moisture: 65%, Motion: 12 events
# Your program should accept these inputs and produce IoT dashboard output
- description: Program executes without Python syntax errors (with automated test inputs)
  check: CountCommandOutput
  options:
    command: 'cd src && echo -e "Room Monitor\ndorm room\n8\n72\n450\n65\n12" | python3 main.py'
    count: 25
    exact: false

# ============================================================================
# CODE QUALITY CHECKS - Verify specific programming concepts in main.py
# ============================================================================

# Check for specific code patterns in main.py
- src/main.py:
    # Check for type conversion (casting) in source code
    - description: Use int() function for type conversion in main.py
      check: MatchFileFragment
      options:
        fragment: " int("
        count: 5
        exact: false
    # Check for temperature conversion formula in source code  
    - description: Include temperature conversion formula in main.py
      check: MatchFileFragment
      options:
        fragment: "* 5 / 9"
        count: 1
        exact: false
    # Check for division calculations in source code
    - description: Include division calculations for sensor analysis in main.py
      check: MatchFileFragment
      options:
        fragment: "/ monitoring_hours"
        count: 2
        exact: false
    # Check for string method usage in source code
    - description: Use .upper() method for string operations in main.py
      check: MatchFileFragment
      options:
        fragment: ".upper()"
        count: 2
        exact: false

# Check for specific IoT output content when program runs
# These tests use the same automated inputs as above to verify your program
# produces the expected IoT dashboard sections and content
- description: Program displays sensor dashboard welcome message
  check: MatchCommandFragment
  options:
    command: 'cd src && echo -e "Room Monitor\ndorm room\n8\n72\n450\n65\n12" | python3 main.py'
    fragment: "SENSOR SIMULATION"
    count: 1
    exact: true

- description: Program displays temperature analysis section
  check: MatchCommandFragment
  options:
    command: 'cd src && echo -e "Room Monitor\ndorm room\n8\n72\n450\n65\n12" | python3 main.py'
    fragment: "TEMPERATURE ANALYSIS"
    count: 1
    exact: true

- description: Program displays IoT hardware message
  check: MatchCommandFragment
  options:
    command: 'cd src && echo -e "Room Monitor\ndorm room\n8\n72\n450\n65\n12" | python3 main.py'
    fragment: "real hardware next week"
    count: 1
    exact: true

# ============================================================================
# REPOSITORY AND VERSION CONTROL CHECKS
# ============================================================================

# Check for git repository activity
- description: Have at least a minimum number of commits in repository
  check: CountCommits
  options:
    count: 3
